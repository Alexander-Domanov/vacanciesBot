
const { google } = require("googleapis");

function NodeGoogleSheets(file, sheetId, keyMass, fun) {
    const auth = new google.auth.GoogleAuth({
        keyFile: file,
        scopes: "https://www.googleapis.com/auth/spreadsheets",
    });

    (async () => {
        const client = await auth.getClient();
        const googleSheets = google.sheets({ version: "v4", auth: client });
        const spreadsheetId = sheetId;

        const metaData = await googleSheets.spreadsheets.get({
            auth,
            spreadsheetId,
        });

        const data = {
            auth,
            spreadsheetId,
            valueInputOption: "USER_ENTERED",
            resource: {
                values: keyMass.change,
            },
        }
        if(keyMass.append) {
            data['range'] = keyMass.append;
            const append = await googleSheets.spreadsheets.values.append(data);

            fun(append);
        } else if(keyMass.values) {
            data['range'] = keyMass.values;

            delete data.valueInputOption; delete data.resource;
            const values = await googleSheets.spreadsheets.values.get(data);

            fun(values);
        } else if(keyMass.update) {
            data['range'] = keyMass.update;

            const update = await googleSheets.spreadsheets.values.update(data);

            fun(update);
        }
    })();
}

const saveDataVacancies = ({date = 0, firstName = '', lastName = '', tg, message, agree = '–ù–µ—Ç'})=> NodeGoogleSheets('google_file.json', '1Slpm3j_yIhoxCjFA1pJYr9d-cle0nRTwylYh17kkxA4', {append: 'vacancies',
    change: [[date, firstName,lastName,`https://t.me/${tg}`,message, agree]]}, (data) => {
})

const saveWithoutData = ({date = 0, firstName = '', lastName = '', tg})=> NodeGoogleSheets('google_file.json', '1Slpm3j_yIhoxCjFA1pJYr9d-cle0nRTwylYh17kkxA4', {append: 'vacanciesWithoutData',
    change: [[date, firstName,lastName,`https://t.me/${tg}`]]}, (data) => {
})

const TelegramAPI = require('node-telegram-bot-api')

const bot = new TelegramAPI('6993113566:AAGYi5kv5JMxpC2YVLIIneY_UG8F9KNmHng',
    {
        polling: true
    }
)

const pattern = /^[\d\+][\d\(\)\s-.]{2,14}\d.*$|(5\.\s*|5\s*)?[\d\+][\d\(\)\s-.]{2,14}\d.*$/;

let userAgreeDataProcessing = false

const start = () => {
    bot.setMyCommands([
        {command: '/start', description:'–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º'},
    ])

    bot.on('message',async (msq)=> {
        const text = msq.text
        const chatID = msq.chat.id

        const {first_name, last_name, username} = msq.from
        const dateUser = msq.date

        const buttonAgree = {
            inline_keyboard: [[{text: "–°–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", callback_data: 'agree'}],],
        }

        const info = '–î–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n' +
            '\n' +
            '1. –§–ò–û\n' +
            '2. –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? \n' +
            '3. –ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è. \n' +
            '4. –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ª–∏ –≤–∞—Å –ø–æ–ª–Ω–∞—è –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å?\n' +
            '5. –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).'
        const messageAgreeDataProcessing = `–ü–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∞–Ω–∫–µ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –ø–æ –≤–∞—à–µ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø–æ–ø—Ä–æ—Å–∏–º –æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—Å –¥–ª—è —Å–≤—è–∑–∏ –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π).`

        bot.on('callback_query', async (query) => {
            const messageChatID = query.message.chat.id
            if (query.data === 'agree' && !userAgreeDataProcessing) {
                userAgreeDataProcessing = true
                return await bot.sendMessage(messageChatID, info)
            }
        })
        if (text === '/start') {
            let s = new Date(dateUser * 1000).toLocaleString("ru")
            userAgreeDataProcessing = false
            saveWithoutData({date: s, firstName: first_name,lastName: last_name,tg:username})
            await bot.sendMessage(chatID,
                `
                ${'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å, –¥–æ—Ä–æ–≥–æ–π –∫–∞–Ω–¥–∏–¥–∞—Çüëãüèª\n'}${'–ï—Å–ª–∏ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç, –º—ã –Ω—É–∂–Ω—ã –¥—Ä—É–≥ –¥—Ä—É–≥—Éü´Ç\n'}${'–î–ª—è –Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π—Ç–µ —Å –í–∞–º–∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—èüôÉ\n\n'}${messageAgreeDataProcessing}`,
                {
                    reply_markup: {
                        inline_keyboard: buttonAgree.inline_keyboard
                    }
                }
            )
            return await bot.sendMessage(chatID, '–ï—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –Ω–∞–ø—Ä—è–º—É—é —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ç–¥–µ–ª–æ–º –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É.\n' +
                '\n' +
                '–°–¥–µ–ª–∞—Ç—å —ç—Ç–æ –º–æ–∂–Ω–æ –ø–æ –Ω–æ–º–µ—Ä—É:\n' +
                '+375291342537 (—Ä–∞–±–æ—á–∏–π)\n' +
                '+375445772051 (–ü–∞–≤–µ–ª)\n' +
                '\n' +
                '–∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –¢–ì:\n' +
                '@Pashak86')
        }
        if (userAgreeDataProcessing) {
            if (text.match(pattern)) {
                let s = new Date(dateUser * 1000).toLocaleString("ru")
                saveDataVacancies({date: s, firstName: first_name,lastName: last_name,tg:username,message: text, agree: '–î–∞'})
                userAgreeDataProcessing = false
                return await bot.sendMessage(chatID, '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–∞—à –æ—Ç–∫–ª–∏–∫!)\n' +
                    '–í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.')
            }
            else {
                return await bot.sendMessage(chatID, `${info}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!`)
            }
        }

        return await bot.sendMessage(chatID, messageAgreeDataProcessing, {
            reply_markup: {
                inline_keyboard: buttonAgree.inline_keyboard
            }
        })
    })

}

start()
